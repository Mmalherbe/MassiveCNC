[segment [list* "SVGtoGCODE.mcPopupMenu.Add" (&fun-type (&void) [segment [&arg (&byval) (&long) "iMenuID"] [&arg (&variant) "vMenuItem"] [&arg (&optional) (&boolean) "bDefault" #f] [&arg (&optional) (&boolean) "bChecked" #f] [&arg (&optional) (&type "mceItemStates") "eItemState"] [&arg (&optional) (&byval) (&long) "imgUnchecked" 0] [&arg (&optional) (&byval) (&long) "imgChecked" 0]])] [list* "SVGtoGCODE.ColorCode.loadPantone.X2" [&array (&string)]] [list* "SVGtoGCODE.ColorCode.loadPantone.X" [&array (&string)]] [list* "SVGtoGCODE.ColorCode.textColorBasedOnBackground" (&fun-type [&type "ColorConstants"] [segment [&arg (&long) "inC"]])] [list* "SVGtoGCODE.ColorCode.convertRGBToVB" (&fun-type [&type-dot [&id "stdole"] [&id "OLE_COLOR"]] [segment [&arg (&type "typRGB") "inRGB"]])] [list* "SVGtoGCODE.GeneralFunctions.Swap.b" (&double)] [list* "SVGtoGCODE.GeneralFunctions.GCD_Of.y" (&double)] [list* "SVGtoGCODE.GeneralFunctions.GCD_Of.x" (&double)] [list* "SVGtoGCODE.GeneralFunctions.GCD_Of.R" (&double)] [list* "SVGtoGCODE.GeneralFunctions.GCD_Of.Q" (&double)] [list* "SVGtoGCODE.GeneralFunctions.addToLog.x" (&string)] [list* "SVGtoGCODE.GeneralFunctions.Swap" (&fun-type [&void] [segment [&arg (&double) "in1"] [&arg (&double) "in2"]])] [list* "SVGtoGCODE.GeneralFunctions.Swap.in2" (&double)] [list* "SVGtoGCODE.GeneralFunctions.Swap.in1" (&double)] [list* "SVGtoGCODE.GeneralFunctions.setComboBoxToTextItem" (&fun-type (&boolean) [segment [&arg [&type-dot [&id "VB"] [&id "ComboBox"]] "checkComboBox"] [&arg (&string) "matchString"]])] [list* "SVGtoGCODE.GeneralFunctions.setComboBoxToTextItem.checkComboBox" [&type-dot [&id "VB"] [&id "ComboBox"]]] [list* "SVGtoGCODE.GeneralFunctions.MyIsNumeric" (&fun-type (&boolean) [segment [&arg (&string) "Expression"]])] [list* "SVGtoGCODE.GeneralFunctions.MyIsNumeric.Expression" (&string)] [list* "SVGtoGCODE.GeneralFunctions.Min" (&fun-type (&double) [segment [&arg (&double) "n1"] [&arg (&double) "n2"]])] [list* "SVGtoGCODE.GeneralFunctions.Min.n2" (&double)] [list* "SVGtoGCODE.GeneralFunctions.Min.n1" (&double)] [list* "SVGtoGCODE.GeneralFunctions.Max" (&fun-type (&double) [segment [&arg (&double) "n1"] [&arg (&double) "n2"]])] [list* "SVGtoGCODE.GeneralFunctions.Max.n2" (&double)] [list* "SVGtoGCODE.GeneralFunctions.Max.n1" (&double)] [list* "SVGtoGCODE.GeneralFunctions.makeHTMLCodes" (&fun-type (&string) [segment [&arg (&byval) (&string) "ST"]])] [list* "SVGtoGCODE.GeneralFunctions.isInArray" (&fun-type (&boolean) [segment [&arg (&variant) "checkFor"] [&arg (&array (&variant) -1) "checkIn"]])] [list* "SVGtoGCODE.GeneralFunctions.isInArray.checkIn" (&array (&variant) -1)] [list* "SVGtoGCODE.GeneralFunctions.isInArray.checkFor" (&variant)] [list* "SVGtoGCODE.GeneralFunctions.isIn" (&fun-type (&boolean) [segment [&arg (&variant) "checkFor"] (&arg-paramarray "checkIn")])] [list* "SVGtoGCODE.GeneralFunctions.isIn.checkFor" (&variant)] [list* "SVGtoGCODE.GeneralFunctions.HandleError" (&fun-type [&void] [segment [&arg (&string) "ErrLine"] [&arg (&string) "ErrLocation"] [&arg (&string) "ErrNum"] [&arg (&string) "ErrDesc"]])] [list* "SVGtoGCODE.GeneralFunctions.HandleError.ErrDesc" (&string)] [list* "SVGtoGCODE.GeneralFunctions.HandleError.ErrNum" (&string)] [list* "SVGtoGCODE.GeneralFunctions.HandleError.ErrLocation" (&string)] [list* "SVGtoGCODE.GeneralFunctions.HandleError.ErrLine" (&string)] [list* "SVGtoGCODE.GeneralFunctions.FromCheck" (&fun-type (&boolean) [segment [&arg [&type-dot [&id "VB"] [&id "CheckBox"]] "inCheck"]])] [list* "SVGtoGCODE.GeneralFunctions.FromCheck.inCheck" [&type-dot [&id "VB"] [&id "CheckBox"]]] [list* "SVGtoGCODE.GeneralFunctions.addToLog" (&fun-type [&void] [segment [&arg-paramarray "entries" (&string)]])] [list* "SVGtoGCODE.GeneralFunctions.addToLog.entries" (&string)] [list* "SVGtoGCODE.Polygons.doPoly.cl" (&type-collection (&long) (&variant))] [list* "SVGtoGCODE.Polygons.doPoly" (&fun-type [&void] [segment [&arg (&long) "polyID"] [&arg (&type "pointD") "a"] [&arg (&type "pointD") "B"] [&arg [&array (&type "pointD")] "result"]])] [list* "SVGtoGCODE.Polygons.doPoly.polyID" (&long)] [list* "SVGtoGCODE.SVGParse.transformLine.pSplit" [&array (&string)]] [list* "SVGtoGCODE.SVGParse.pointIsInPolyWithContain.cl" (&type-collection (&long) (&variant))] [list* "SVGtoGCODE.SVGParse.lineThroughPolygon.cl" (&type-collection (&long) (&variant))] [list* "SVGtoGCODE.SVGParse.pointIsInPoly" (&fun-type (&boolean) [segment [&arg (&long) "polyID"] [&arg (&double) "x"] [&arg (&double) "y"]])] [list* "SVGtoGCODE.SVGParse.getPinSeg" (&fun-type (&double) [segment [&arg (&type "pointD") "pStart"] [&arg (&type "pointD") "pEnd"]])] [list* "SVGtoGCODE.SVGParse.getAttr" (&fun-type (&string) [segment [&arg [&type-dot [&id "CHILKATXMLLib"] [&id "ChilkatXml"]] "attr"] [&arg (&string) "attrName"] [&arg (&optional) (&string) "DefaultValue"]])] [list* "SVGtoGCODE.SVGParse.getAttr.DefaultValue" (&string)] [list* "SVGtoGCODE.SVGParse.getAttr.attr" [&type-dot [&id "CHILKATXMLLib"] [&id "ChilkatXml"]]] [list* "SVGtoGCODE.SVGParse.canPolyFitInside" (&fun-type (&boolean) [segment [&arg (&long) "smallPoly"] [&arg (&long) "bigPoly"]])] [list* "SVGtoGCODE.Bezier.DrawBezier.y0" (&double)] [list* "SVGtoGCODE.Bezier.DrawBezier.x1" (&double)] [list* "SVGtoGCODE.Bezier.DrawBezier.x0" (&double)] [list* "SVGtoGCODE.Bezier.DrawBezier.t" (&double)] [list* "SVGtoGCODE.Bezier.DrawBezier" (&fun-type (&void) [segment [&arg [&type-dot [&id "VB"] [&id "PictureBox"]] "gr"] [&arg (&double) "dt"] [&arg (&type "pointD") "pt0"] [&arg (&type "pointD") "pt1"] [&arg (&type "pointD") "pt2"] [&arg (&type "pointD") "pt3"]])] [list* "SVGtoGCODE.Bezier.DrawBezier.gr" [&type-dot [&id "VB"] [&id "PictureBox"]]] [list* "SVGtoGCODE.frmInterface.List1_MouseDown.selLines" (&type-collection (&long) (&variant))] [list* "SVGtoGCODE.frmInterface.drawPuzzleEdge.puzzShapes" [&array (&string)]] [list* "SVGtoGCODE.frmInterface.drawPuzzleEdge.puzzPieces" [&array (&string)]] [list* "SVGtoGCODE.frmInterface.drawPuzzleEdge.pont" [&array (&string)]] [list* "SVGtoGCODE.frmInterface.drawLines.c" (&variant)] [list* "SVGtoGCODE.frmInterface.doPagesOld.pageW" (&integer)] [list* "SVGtoGCODE.frmInterface.doPagesOld.pageH" (&integer)]]